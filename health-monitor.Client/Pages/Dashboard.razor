@page "/"
@using health_monitor.Client.Model
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject HttpClient client

<PageTitle>HealthPulse</PageTitle>

<style>
    .icon-text-align {
        display: inline-flex;
        align-items: center;
        vertical-align: middle;
    }
    .service-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .service-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
</style>

@if (_services == null)
{
    <div class="flex items-center justify-center h-64">
        <div class="animate-pulse text-slate-400">
            <div class="flex items-center">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-purple-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>Loading services...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="mb-6">
        <h1 class="text-2xl font-bold text-slate-100 mb-2">Service Dashboard</h1>
        <p class="text-slate-400">Overview of all monitored services</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 h-full">
        @foreach (var service in _services)
        {
            var statusStyle = GetStatusStyle(service.LastCheckStatus.Status);
            <div class="service-card rounded-lg shadow-lg overflow-hidden border flex flex-col h-full @statusStyle.bg @statusStyle.border">
                <div class="p-4 sm:p-5 flex flex-col h-full">
                    <div class="flex items-start justify-between mb-3">
                        <div class="flex items-center min-w-0 flex-1">
                            @statusStyle.icon
                            <h3 class="ml-2 text-base sm:text-lg font-semibold @statusStyle.text truncate" title="@service.Name">@service.Name</h3>
                        </div>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium @statusStyle.bgColor @statusStyle.text whitespace-nowrap ml-2">
                            @service.LastCheckStatus.Status
                        </span>
                    </div>
                    <p class="text-xs text-slate-400 mb-4 truncate">@service.ServiceType</p>

                    <div class="space-y-2 flex-1">
                        <div class="flex items-center text-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 text-slate-400 flex-shrink-0">
                                <circle cx="12" cy="12" r="10"></circle>
                                <polyline points="12 6 12 12 16 14"></polyline>
                            </svg>
                            <span class="text-slate-300 truncate">@(service.LastCheckStatus?.ResponseTime)ms response</span>
                        </div>
                        <div class="flex items-center text-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 text-slate-400 flex-shrink-0">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                <line x1="16" y1="2" x2="16" y2="6"></line>
                                <line x1="8" y1="2" x2="8" y2="6"></line>
                                <line x1="3" y1="10" x2="21" y2="10"></line>
                            </svg>
                            <span class="text-slate-400 truncate">@service.LastCheckStatus?.CheckTime.ToString("HH:mm:ss")</span>
                        </div>
                        <div class="flex items-center text-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-slate-400 mr-2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <polyline points="12 6 12 12 8 14"></polyline>
                            </svg>
                            <span class="text-slate-400 mr-2">Last Check:</span>
                            <span class="text-slate-300">@service.LastCheckStatus!.CheckTime.ToString("HH:mm:ss")</span>
                        </div>
                    </div>
                </div>
                    
                <div class="mt-auto pt-3">
                    @if (service.DependentServices.Any())
                    {
                        <div class="mb-3">
                            <div class="flex items-center text-xs text-slate-400 mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 flex-shrink-0">
                                    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="9" cy="7" r="4"></circle>
                                    <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                                    <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                                </svg>
                                <span>Dependencies</span>
                            </div>
                            <div class="space-y-1">
                                @foreach (var dep in service.DependentServices.Take(3))
                                {
                                    var depStatusStyle = GetStatusStyle(dep.LastCheckStatus.Status);
                                    <div class="flex items-center text-xs">
                                        <span class="inline-block w-2 h-2 rounded-full @depStatusStyle.bgColor mr-2 flex-shrink-0"></span>
                                        <span class="truncate" title="@dep.Name">@dep.Name</span>
                                    </div>
                                }
                                @if (service.DependentServices.Count > 3)
                                {
                                    <div class="text-xs text-slate-500">+@(service.DependentServices.Count - 3) more</div>
                                }
                            </div>
                        </div>
                    }

                    @if (service.HistoricStatus.Any())
                    {
                        var isExpanded = _expandedHistories.GetValueOrDefault(service.Id, false);
                        <div class="border-t border-slate-700 pt-3">
                            <button 
                                class="w-full flex items-center justify-between text-xs text-slate-400 hover:text-purple-400 transition-colors"
                                @onclick="() => ToggleHistory(service.Id)">
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 flex-shrink-0">
                                        <circle cx="12" cy="12" r="10"></circle>
                                        <polyline points="12 6 12 12 16 14"></polyline>
                                    </svg>
                                    <span>History</span>
                                </div>
                                <div class="flex items-center">
                                    <span class="text-xs text-slate-500 mr-1">Last 5 checks</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform @(isExpanded ? "rotate-180" : "") flex-shrink-0">
                                        <polyline points="6 9 12 15 18 9"></polyline>
                                    </svg>
                                </div>
                            </button>
                            @if (isExpanded)
                            {
                                <div class="space-y-1 mt-2">
                                    @foreach (var status in service.HistoricStatus.Take(5))
                                    {
                                        var histStatusStyle = GetStatusStyle(status.Status);
                                        <div class="flex items-center justify-between text-xs">
                                            <div class="flex items-center min-w-0">
                                                <span class="inline-block w-2 h-2 rounded-full @histStatusStyle.bgColor mr-2 flex-shrink-0"></span>
                                                <span class="truncate">@status.Status</span>
                                            </div>
                                            <span class="text-slate-500 whitespace-nowrap ml-2">@status.CheckTime.ToString("HH:mm")</span>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="px-4 sm:px-5 py-3 bg-slate-800/50 border-t border-slate-700 flex items-center justify-between">
                    <a href="@service.Url" target="_blank" class="text-xs text-slate-400 hover:text-purple-400 transition-colors truncate flex-1 pr-2" title="@service.Url">
                        @service.Url
                    </a>
                </div>
            </div>
        }
    </div>
}
@code {
    private Service[] _services = Array.Empty<Service>();
    private HubConnection? _hubConnection;
    private Dictionary<string, bool> _expandedHistories = new();
    
    protected override async Task OnInitializedAsync()
    {
        var data = await client.GetFromJsonAsync<Service[]>(NavigationManager.ToAbsoluteUri("/data"));
        _services = data;
        foreach (var service in _services)
        {
            if (!_expandedHistories.ContainsKey(service.Id))
            {
                _expandedHistories[service.Id] = false;
            }
        }
        await InitializeHubAsync();
    }

    private void ToggleHistory(string serviceId)
    {
        if (_expandedHistories.ContainsKey(serviceId))
        {
            _expandedHistories[serviceId] = !_expandedHistories[serviceId];
        }
        else
        {
            _expandedHistories[serviceId] = true;
        }
        StateHasChanged();
    }

    private async Task InitializeHubAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notification"))
            .Build();
            
        _hubConnection.On<Service[]>("ReceiveNotification", services =>
        {
            _services = services;
            // Update expanded states for any new services
            if (_services != null)
            {
                foreach (var service in _services)
                {
                    if (!_expandedHistories.ContainsKey(service.Id))
                    {
                        _expandedHistories[service.Id] = false;
                    }
                }
            }
            InvokeAsync(StateHasChanged);
        });
        
        await _hubConnection.StartAsync();
    }
    
    private (string bg, string border, string text, string bgColor, MarkupString icon) GetStatusStyle(Status status)
    {
        return status switch
        {
            Status.Healthy => (
                "bg-green-500/10", 
                "border-green-500/30", 
                "text-green-400",
                "bg-green-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-green-500\"><path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path><polyline points=\"22 4 12 14.01 9 11.01\"></polyline></svg>")
            ),
            Status.Degraded => (
                "bg-orange-500/10", 
                "border-orange-500/30", 
                "text-orange-400",
                "bg-orange-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-orange-500\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line></svg>")
            ),
            Status.Critical => (
                "bg-red-500/10", 
                "border-red-500/30", 
                "text-red-400",
                "bg-red-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-red-500\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line></svg>")
            ),
            _ => (
                "bg-gray-500/10", 
                "border-gray-500/30", 
                "text-gray-400",
                "bg-gray-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-gray-500\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>")
            )
        };
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
