@page "/"
@using health_monitor.Client.Model
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject HttpClient Client

<PageTitle>Dashboard</PageTitle>

@if (_servicesById.Count == 0)
{
    <div class="flex items-center justify-center h-64">
        <div class="animate-pulse text-slate-400">
            <div class="flex items-center">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-purple-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>Loading services...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="mb-6">
        <h1 class="text-2xl font-bold text-slate-100 mb-2">Service Dashboard</h1>
        <p class="text-slate-400">Overview of all monitored services</p>
    </div>

    <div id="dashboardView" class="view-content grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6">
    @foreach (var service in _servicesById.Values)
    {
        var statusStyle = GetStatusStyle(service.LastCheckStatus.Status);
        <div class="service-card rounded-lg shadow-lg overflow-hidden @statusStyle.bg @statusStyle.border border flex flex-col">
            <div class="p-3 sm:p-4 flex-grow">
                <div class="flex items-center justify-between mb-2">
                    <div class="flex items-center min-w-0">
                        @statusStyle.icon
                        <h3 class="ml-2 text-base sm:text-lg font-semibold @statusStyle.text truncate" title="@service.Name">
                            @service.Name
                        </h3>
                    </div>
                    <div class="flex space-x-1 flex-shrink-0">
                        <button class="expand-btn p-1 text-slate-400 hover:text-slate-200 rounded-full hover:bg-slate-600/50 transition-colors" title="Toggle Details">
                            <svg class="chevron-down" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="6 9 12 15 18 9"/>
                            </svg>
                            <svg class="chevron-up hidden" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="18 15 12 9 6 15"/>
                            </svg>
                        </button>
                    </div>
                </div>
                <p class="text-xs text-slate-400 truncate mb-1" title="@service.Url">
                    <span class="font-semibold">@service.ServiceType -</span> @service.Url
                </p>
                <div class="text-sm font-medium px-2 py-0.5 rounded inline-block @statusStyle.bg @statusStyle.border @statusStyle.text mb-1">
                    @service.LastCheckStatus.Status
                </div>
                <p class="text-xs text-slate-400 mt-1">Status: @service.LastCheckStatus.StatusMsg</p>
                <div class="flex justify-between text-xs text-slate-400 mt-2">
                    <span class="icon-text-align">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                            <circle cx="12" cy="12" r="10"/>
                            <polyline points="12 6 12 12 16 14"/>
                        </svg>
                        @service.LastCheckStatus.ResponseTime ms
                    </span>
                    <span class="icon-text-align">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                            <line x1="16" y1="2" x2="16" y2="6"/>
                            <line x1="8" y1="2" x2="8" y2="6"/>
                            <line x1="3" y1="10" x2="21" y2="10"/>
                        </svg>
                        @service.LastCheckStatus.CheckTime.ToString("HH:mm:ss")
                    </span>
                </div>
                <p class="text-xs text-slate-400 mt-1">Interval: 30s</p>
            </div>
            <div class="details-content p-3 sm:p-4 border-t border-slate-700/50">
                <p class="text-xs text-slate-300 font-semibold mb-1">History:</p>
                <ul class="space-y-1 max-h-24 history-scroll overflow-y-auto pr-1">
                    @foreach (var historicStatus in service.HistoricStatus)
                    {
                        <li class="text-xs text-slate-400 bg-slate-700/30 p-1.5 rounded">
                            <span class="font-mono">@historicStatus.CheckTime.ToString("HH:mm:ss"): </span>@historicStatus.StatusMsg (@historicStatus.ResponseTime ms)
                        </li>
                    }
                </ul>
                <div class="mt-2 flex flex-wrap gap-1">
                    <span class="text-xs bg-purple-500/20 text-purple-300 px-2 py-0.5 rounded-full">API</span>
                    <span class="text-xs bg-purple-500/20 text-purple-300 px-2 py-0.5 rounded-full">Production</span>
                </div>
            </div>   
        </div>
    }
    </div>
}
@code {
    private Dictionary<string, Service> _servicesById = new();
    private HubConnection? _hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        var data = await Client.GetFromJsonAsync<Service[]>(NavigationManager.ToAbsoluteUri("/data"));
        if (data?.Length > 0)
            _servicesById = data.ToDictionary(s => s.Id, s => s);
        await InitializeHubAsync();
    }

    private async Task InitializeHubAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notification"))
            .Build();
            
        _hubConnection.On<Service>("ReceiveNotification", service =>
        {
            _servicesById[service.Id] = service;
            InvokeAsync(StateHasChanged);
        });
        
        await _hubConnection.StartAsync();
    }
    
    private (string bg, string border, string text, string bgColor, MarkupString icon) GetStatusStyle(Status status)
    {
        return status switch
        {
            Status.Healthy => (
                "bg-green-500/10", 
                "border-green-500/30", 
                "text-green-400",
                "bg-green-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-green-500\"><path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path><polyline points=\"22 4 12 14.01 9 11.01\"></polyline></svg>")
            ),
            Status.Degraded => (
                "bg-orange-500/10", 
                "border-orange-500/30", 
                "text-orange-400",
                "bg-orange-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-orange-500\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line></svg>")
            ),
            Status.Critical => (
                "bg-red-500/10", 
                "border-red-500/30", 
                "text-red-400",
                "bg-red-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-red-500\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line></svg>")
            ),
            _ => (
                "bg-gray-500/10", 
                "border-gray-500/30", 
                "text-gray-400",
                "bg-gray-500",
                new MarkupString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon-text-align text-gray-500\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>")
            )
        };
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
