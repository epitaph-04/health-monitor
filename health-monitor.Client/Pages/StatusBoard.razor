@page "/status"
@using health_monitor.Client.Model
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>Status Board</PageTitle>

@if (_services == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div id="statusTableView" class="view-content">
        <div class="bg-slate-800 shadow-lg rounded-lg p-4 sm:p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-semibold text-slate-100 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 icon-text-align">
                        <line x1="8" y1="6" x2="21" y2="6"/>
                        <line x1="8" y1="12" x2="21" y2="12"/>
                        <line x1="8" y1="18" x2="21" y2="18"/>
                        <line x1="3" y1="6" x2="3.01" y2="6"/>
                        <line x1="3" y1="12" x2="3.01" y2="12"/>
                        <line x1="3" y1="18" x2="3.01" y2="18"/>
                    </svg>
                    Service Status Table
                </h2>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-slate-700">
                    <thead class="bg-slate-700/50">
                    <tr>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Service Name</th>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">URL</th>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Last Check</th>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Resp. Time</th>
                        <th scope="col" class="px-3 sm:px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Actions</th>
                    </tr>
                    </thead>
                    <tbody id="statusTableBody" class="bg-slate-800 divide-y divide-slate-700">
                    @foreach (var service in _services)
                    {
                        <tr class="hover:bg-slate-700/40 transition-colors">
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top">
                                <div class="flex items-center">
                                    @{ 
                                        switch(service.LastCheckStatus.Status)
                                        {
                                            case Status.Healthy:
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-text-align text-green-500">
                                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
                                                    <polyline points="22 4 12 14.01 9 11.01"/>
                                                </svg>
                                                break;
                                            case Status.Degraded:
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-text-align text-orange-500">
                                                    <path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/>
                                                    <line x1="12" y1="9" x2="12" y2="13"/>
                                                    <line x1="12" y1="17" x2="12.01" y2="17"/>
                                                </svg>
                                                break;
                                            case Status.Critical:
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-text-align text-red-500">
                                                    <circle cx="12" cy="12" r="10"/>
                                                    <line x1="15" y1="9" x2="9" y2="15"/>
                                                    <line x1="9" y1="9" x2="15" y2="15"/>
                                                </svg>
                                                break;
                                            default:
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-text-align text-gray-500">
                                                    <circle cx="12" cy="12" r="10"/>
                                                    <line x1="12" y1="16" x2="12" y2="12"/>
                                                    <line x1="12" y1="8" x2="12.01" y2="8"/>
                                                </svg>
                                                break;
                                        }
                                        var statusStyle = service.LastCheckStatus.Status switch
                                        {
                                            Status.Healthy => "text-green-400",
                                            Status.Degraded => "text-orange-400",
                                            Status.Critical => "text-red-400",
                                            _ => "text-gray-400"
                                        };
                                    }
                                    <div class="ml-2 text-sm font-medium @statusStyle">@service.LastCheckStatus.Status</div>
                                </div>
                            </td>
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top">
                                <div>
                                    <div class="text-sm text-slate-200 truncate max-w-[150px] sm:max-w-xs" title="@service.Name">@service.Name</div>
                                    <div class="text-xs text-slate-400 truncate max-w-[150px] sm:max-w-xs" title="@service.LastCheckStatus.StatusMsg">@service.LastCheckStatus.StatusMsg</div>
                                    @if (service.DependentServices.Any())
                                    {
                                        <div class="mt-1 pl-3 border-l-2 border-slate-600 space-y-0.5">
                                            @foreach (var depSvc in service.DependentServices)
                                            {
                                                var depStatusStyle = depSvc.LastCheckStatus.Status switch
                                                {
                                                    Status.Healthy => "text-green-400",
                                                    Status.Degraded => "text-orange-400",
                                                    Status.Critical => "text-red-400",
                                                    _ => "text-gray-400"
                                                };
                                                <div class="text-xs text-slate-400 flex items-start">
                                                    <span class="mr-1.5 text-slate-500 flex-shrink-0">↳</span>
                                                    <div class="flex-1 min-w-0">
                                                        <span class="@depStatusStyle font-medium truncate" title="@depSvc.Name">@depSvc.Name</span>
                                                        <span class="text-slate-500 ml-1 truncate" title="@depSvc.LastCheckStatus.StatusMsg">(@depSvc.LastCheckStatus.StatusMsg)</span>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </td>
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top text-sm text-slate-300">@service.ServiceType</td>
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top text-sm text-slate-300 truncate max-w-[150px] sm:max-w-xs" title="@service.Url">@service.Url</td>
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top text-sm text-slate-300">@service.LastCheckStatus.CheckTime.ToLongTimeString()</td>
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top text-sm text-slate-300">@($"{service.LastCheckStatus.ResponseTime}ms")</td>
                            <td class="px-3 sm:px-4 py-3 whitespace-nowrap align-top text-right text-sm font-medium">
                                <button class="text-purple-400 hover:text-purple-300" title="Actions">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <circle cx="12" cy="12" r="1"/>
                                        <circle cx="12" cy="5" r="1"/>
                                        <circle cx="12" cy="19" r="1"/>
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>    
}

@code {
    private Service[]? _services;
    private HubConnection? _hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl("http://localhost:5000/notification").Build();
        _hubConnection.On<Service[]>("ReceiveNotification", svc =>
        {
            _services = svc;
            InvokeAsync(StateHasChanged);
        });
        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}